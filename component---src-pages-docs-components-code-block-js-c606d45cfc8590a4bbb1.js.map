{"version":3,"sources":["webpack:///./src/pages/_docs/components/code-block.js"],"names":["CodeBlock","React","forwardRef","ref","className","as","props","classes","classNames","Component","displayName","defaultProps","variant","active","disabled","type"],"mappings":"kMA+CA,IAOMA,EAAYC,IAAMC,YAAW,WAA8BC,GAAS,IAApCC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,GAAOC,E,oIAAiB,uBACjEC,EAAUC,IAAWJ,EAAD,OAEpBK,EAAYJ,GAAM,MACxB,OAAO,kBAACI,EAAD,iBAAeH,EAAf,CAAsBF,UAAWG,QAG1CP,EAAUU,YAAc,YAExBV,EAAUW,aAhBW,CACnBC,QAAS,UACTC,QAAQ,EACRC,UAAU,EACVC,KAAM,UAcOf","file":"component---src-pages-docs-components-code-block-js-c606d45cfc8590a4bbb1.js","sourcesContent":["import classNames from \"classnames\"\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst propTypes = {\n  /**\n   * One or more button variant combinations\n   *\n   * buttons may be one of a variety of visual variants such as:\n   *\n   * `'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', 'link'`\n   *\n   * as well as \"outline\" versions (prefixed by 'outline-*')\n   *\n   * `'outline-primary', 'outline-secondary', 'outline-success', 'outline-danger', 'outline-warning', 'outline-info', 'outline-dark', 'outline-light'`\n   */\n  variant: PropTypes.string,\n\n  /**\n   * Specifies a large or small button.\n   *\n   * @type ('sm'|'lg')\n   */\n  size: PropTypes.string,\n\n  /** Spans the full width of the Button parent */\n  block: PropTypes.bool,\n\n  /** Manually set the visual state of the button to `:active` */\n  active: PropTypes.bool,\n\n  /**\n   * Disables the Button, preventing mouse events,\n   * even if the underlying component is an `<a>` element\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Defines HTML button type attribute.\n   *\n   * @default 'button'\n   */\n  type: PropTypes.oneOf([\"button\", \"reset\", \"submit\", null]),\n\n  as: PropTypes.elementType,\n}\n\nconst defaultProps = {\n  variant: \"primary\",\n  active: false,\n  disabled: false,\n  type: \"button\",\n}\n\nconst CodeBlock = React.forwardRef(({ className, as, ...props }, ref) => {\n  const classes = classNames(className, `btn`)\n\n  const Component = as || \"div\"\n  return <Component {...props} className={classes} />\n})\n\nCodeBlock.displayName = \"CodeBlock\"\nCodeBlock.propTypes = propTypes\nCodeBlock.defaultProps = defaultProps\n\nexport default CodeBlock\n"],"sourceRoot":""}